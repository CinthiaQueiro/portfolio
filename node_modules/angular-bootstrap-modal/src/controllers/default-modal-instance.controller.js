/**
*
* TMJ Angular Modal Library
* @author TMJ Engineering.
*
* Created a default approach modal using modal bootstrap
* @copyright TMJ Philippines BPO Services Inc. 2016
*/

'use strict';

DefaultModalInstanceCtrl.$inject = [
    '$uibModalInstance',
    'attr',
    '$injector',
    'MODAL_INSTANCE_CONFIG',
    '$http',
    'TMJFormData'
];

/* @ngInject */
function DefaultModalInstanceCtrl($uibModalInstance, attr, $injector,
    MODAL_INSTANCE_CONFIG, $http, TMJFormData) {

    var vm = this;
    vm.$uibModalInstance = $uibModalInstance;
    vm.save = save;
    vm.saveWithFile = saveWithFile;
    vm.close = close;
    // you can override functions stated above
    Object.assign(vm, attr);


    function save() {
        var formData = getFormData();

        return requestSave(formData);
    }

    function saveWithFile() {
        var formData = getFormData();
        formData = TMJFormData.build(formData);

        var config = {
            transformRequest: angular.identity,
            headers: {'Content-Type': undefined}
        };

        return requestSave(formData, config);
    }

    function requestSave(formData, config) {
        if (!formData) return;

        var request = {
            'false': requestHttp,
            'true': requestResource
        };
        var defer = request[!!vm.resource](formData, config);

        return defer.then(function(result) {
            // if not stated to keep open return the result
            if (!vm.keepOpen && !result.error) {
                // pass the result to the client
                $uibModalInstance.close(result);
            }

            showMessage(result.msg, result.status);
            // if keep open specify the data to be returned to the client for them to manipulate
            vm.returnData = result;

            // for instance that from adding you want to change url to update/delete
            vm.url = result.url || vm.url;
            // if for instance need to update the input after the transaction
            vm.input = result.input || vm.input;

            if (!vm.resource) return;

            // for instance that from adding you want to change resource action to update/delete
            vm.resource.action = result.resource_action || vm.resource.action;
            // for instance that from adding you want to change resource function
            vm.resource.func = result.resource_func || vm.resource.func;
            // for instance that from adding you want to change resource service
            vm.resource.service = result.resource_service || vm.resource.service;
        }, function(err) {
            showMessage(err, false);
        });
    }

    function showMessage(msg, status) {
        vm.status = status;
        return vm.message = msg || MODAL_INSTANCE_CONFIG.MSG;
    }

    function requestHttp(formData, config) {
        return $http.post(vm.url, formData, config).then(function(result) {
            result = result.data;
            return result;
        });
    }

    function requestResource(formData, config) {
        //inject service or factory dynamically
        var resource_data = vm.resource;

        var resource = !(resource_data.service) ? formData :
                    $injector.get(resource_data.service);

        // function or attr name
        // if no function name means factory return already a resource
        if (resource_data.func) {
            // use for service
            resource = resource[resource_data.func];
        }

        if (typeof resource[resource_data.action] != 'function') {
            return console.error('specified resource is not a function'); //need change to function
        }
        // to change the config headers of the resource change it on declaration in your factory
        var res = resource[resource_data.action](formData);
        if (resource_data.service)
            res = res.$promise;

        return res;
    }

    function getFormData() {
        var formData = vm.input;
        if (formData)
            return formData;

        showMessage(MODAL_INSTANCE_CONFIG.ERR.EMPTY_FDATA, false);
        return false;
    }

    function close() {
        if (!vm.keepOpen || !vm.returnData) return $uibModalInstance.dismiss('cancel');

        $uibModalInstance.close(vm.returnData);
    }
}

module.exports = DefaultModalInstanceCtrl;
